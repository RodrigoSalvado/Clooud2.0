name: Deploy Bicep Individualizado em France Central

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'
      FUNCTIONAPP_NAME: 'func-rodrig0salv'
      RG: 'MiniProjetoCloud2.0'
      TARGET_LOCATION: 'francecentral'
      WEBAPP_NAME: 'minhaapp-rodrig0salv'
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './redditIngestFunc'
      STORAGE_ACCOUNT_NAME: 'miniprojetostorage20'
      CONTAINER_NAME: 'reddit-posts'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Login no Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Instalar jq (no runner)
        run: |
          if ! command -v jq &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: (Re)Criar Resource Group em ${{ env.TARGET_LOCATION }}
        run: |
          EXISTE_RG_JSON=$(az group show --name "$RG" -o json 2>/dev/null || echo "")
          if [ -z "$EXISTE_RG_JSON" ]; then
            echo "Criando RG '$RG' em $TARGET_LOCATION..."
            az group create --name "$RG" --location "$TARGET_LOCATION"
          else
            CURRENT_LOCATION=$(echo "$EXISTE_RG_JSON" | jq -r '.location')
            if [ "$CURRENT_LOCATION" != "$TARGET_LOCATION" ]; then
              echo "RG '$RG' existe em $CURRENT_LOCATION e será recriado em $TARGET_LOCATION..."
              az group delete --name "$RG" --yes --no-wait
              echo "Aguardando remoção do RG..."
              for i in {1..60}; do
                if ! az group show --name "$RG" &>/dev/null; then
                  echo "RG removido."
                  break
                fi
                sleep 5
              done
              echo "Criando RG '$RG' em $TARGET_LOCATION..."
              az group create --name "$RG" --location "$TARGET_LOCATION"
            else
              echo "RG '$RG' já existe em $TARGET_LOCATION. Continuando."
            fi
          fi

      - name: Validar templates Bicep localmente
        run: |
          az bicep install || true
          az bicep build --file templates/resource-group.bicep
          az bicep build --file templates/storage-account.bicep
          az bicep build --file templates/cosmosdb.bicep
          az bicep build --file templates/app-service-plan.bicep
          az bicep build --file templates/web-app.bicep
          az bicep build --file templates/function-app.bicep

      - name: Deploy Storage Account + Container
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-storage-$(date +%s)"
            echo "Deploy Storage Account: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/storage-account.bicep \
              --parameters \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                containerName="${CONTAINER_NAME}" \
                enableBlobVersioning=true \
                blobSoftDeleteDays=7 \
              --only-show-errors
            echo "Storage Account deploy concluído: $DEPLOY_NAME"

      - name: Deploy CosmosDB (pular se já existe)
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${COSMOS_ACCOUNT_NAME}"
            if [ -z "$ACCOUNT_NAME" ]; then
              echo "Variável COSMOS_ACCOUNT_NAME vazia: pulando Cosmos DB."
              exit 0
            fi

            if az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then
              echo "Conta Cosmos DB '$ACCOUNT_NAME' já existe em RG '$RG'. Pulando deploy."
            else
              echo "Conta Cosmos DB '$ACCOUNT_NAME' NÃO existe. Realizando deploy em $TARGET_LOCATION..."
              DEPLOY_NAME="deploy-cosmos-$(date +%s)"
              az deployment group create \
                --name "$DEPLOY_NAME" \
                --resource-group "$RG" \
                --template-file templates/cosmosdb.bicep \
                --parameters \
                  cosmosAccountName="$ACCOUNT_NAME" \
                  cosmosLocation="$TARGET_LOCATION" \
                  cosmosDatabaseName='RedditApp' \
                  cosmosContainerName='posts' \
                  cosmosPartitionKeyPath='/id' \
                  cosmosThroughput=${COSMOS_THROUGHPUT} \
                --only-show-errors
              echo "Deploy Cosmos concluído: $DEPLOY_NAME"
            fi

      - name: Deploy App Service Plan para Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-asp-web-$(date +%s)"
            echo "Deploy App Service Plan: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/app-service-plan.bicep \
              --parameters \
                planName='ASP-MiniProjetoCloud2.0' \
                skuTier='Basic' \
                skuName='B2' \
                capacity=1 \
                isLinux=true \
                location="$TARGET_LOCATION" \
              --only-show-errors
            echo "App Service Plan deploy concluído: $DEPLOY_NAME"

      - name: Gerar SAS token Storage (opcional)
        id: gen_sas
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}"
            CONTAINER_NAME="${CONTAINER_NAME}"
            EXPIRY=$(date -u -d "1 day" '+%Y-%m-%dT%H:%MZ')
            sasToken=$(az storage container generate-sas \
              --account-name $ACCOUNT_NAME \
              --name $CONTAINER_NAME \
              --permissions racld \
              --expiry $EXPIRY \
              --https-only \
              --auth-mode login \
              --as-user \
              -o tsv)
            echo "SAS_TOKEN=$sasToken" >> $GITHUB_OUTPUT

      # --- Etapas de build e push da imagem Docker antes de criar a Web App ---
      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem Docker da Web App
        run: |
          echo "A construir a imagem Docker: rodrig0salv/minha-app:latest"
          docker build -t rodrig0salv/minha-app:latest ./web-app

      - name: Push da imagem Docker para Docker Hub
        run: |
          echo "A enviar a imagem Docker para Docker Hub"
          docker push rodrig0salv/minha-app:latest

      # --- Deploy da Function App via Bicep (para criar/inicializar recurso, caso ainda não exista) ---
      - name: Deploy Function App via Bicep (template)
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Deploy Function App ($FUNCTIONAPP_NAME) via Bicep..."
            az deployment group create \
              --name "deploy-funcapp-$(date +%s)" \
              --resource-group "$RG" \
              --template-file templates/function-app.bicep \
              --parameters \
                functionAppName="$FUNCTIONAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                cosmosAccountName="cosmosdbminiprojeto" \
                cosmosDatabaseName="RedditApp" \
                cosmosContainerName="posts" \
                redditUser="Major-Noise-6411" \
                redditPassword="miniprojetocloud" \
                secretValue="DoywW0Lcc26rvDforDKkLOSQsUUwYA" \
                clientIdValue="bzG6zHjC23GSenSIXe0M-Q" \
                translatorEndpoint="" \
                translatorKey="" \
              --only-show-errors
            echo "Function App deployment via Bicep concluído."

      - name: Empacotar código da Function App para Zip Deploy
        run: |
          echo "A empacotar código da Function App..."
          cd "${AZURE_FUNCTIONAPP_PACKAGE_PATH}"
          mkdir -p .python_packages/lib/site-packages
          pip install --upgrade pip
          pip install -r requirements.txt --target .python_packages/lib/site-packages
          zip -r ../funcapp.zip .
          ls -lh ../funcapp.zip

      - name: Deploy Function App via Zip Deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Deploy Function App ($FUNCTIONAPP_NAME) via Zip Deploy..."
            az functionapp deployment source config-zip \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --src "$GITHUB_WORKSPACE/funcapp.zip"
            echo "Zip Deploy da Function concluído."

      - name: Obter master key da Function App
        id: get_function_key
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Obtendo master key da Function App '$FUNCTIONAPP_NAME'..."
            MASTER_KEY=$(az functionapp keys list \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --query "masterKey" -o tsv)
            if [ -z "$MASTER_KEY" ]; then
              echo "Erro: não conseguiu obter master key da Function App."
              exit 1
            fi
            echo "FUNCTION_KEY=$MASTER_KEY" >> $GITHUB_OUTPUT

      - name: Construir FUNCTION_URL_FULL
        id: set_function_url
        run: |
          # Atenção: rota definida no function.json é "route": "search", logo usamos /api/search
          FUNCTION_URL_FULL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/search?code=${{ steps.get_function_key.outputs.FUNCTION_KEY }}"
          echo "FUNCTION_URL_FULL=$FUNCTION_URL_FULL" >> $GITHUB_OUTPUT

      # --- Deploy do Web App com Function URL e CORS fixo para portal.azure.com ---
      - name: Deploy Web App com Function URL e CORS
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-webapp-$(date +%s)"
            echo "Deploy Web App ($WEBAPP_NAME) via Bicep, incluindo FUNCTION_URL e CORS..."
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/web-app.bicep \
              --parameters \
                webAppName="$WEBAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                imageName="rodrig0salv/minha-app:latest" \
                containerRegistryUrl="" \
                containerRegistryUsername="" \
                containerRegistryPassword="" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                containerName="${CONTAINER_NAME}" \
                containerSasToken="${{ steps.gen_sas.outputs.SAS_TOKEN }}" \
                functionUrl="${{ steps.set_function_url.outputs.FUNCTION_URL_FULL }}" \
              --only-show-errors
            echo "Web App deployment concluído: $DEPLOY_NAME"

      - name: Configurar runtime Python no Function App
        uses: azure/cli@v1
        with:
          inlineScript: |
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --settings FUNCTIONS_WORKER_RUNTIME=python WEBSITE_RUN_FROM_PACKAGE=1 SCM_DO_BUILD_DURING_DEPLOYMENT=true

      - name: Reiniciar Web App e Function App após deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp restart --resource-group "$RG" --name "$WEBAPP_NAME"
            az functionapp restart --resource-group "$RG" --name "$FUNCTIONAPP_NAME"

      - name: Mostrar outputs finais Web + Function
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_WEB_NAME=$(az deployment group list --resource-group "$RG" --query "[?starts_with(name,'deploy-webapp-')]|[0].name" -o tsv)
            if [ -n "$DEPLOY_WEB_NAME" ]; then
              echo "Deployment Web App: $DEPLOY_WEB_NAME"
              az deployment group show --resource-group "$RG" --name "$DEPLOY_WEB_NAME" --query properties.outputs
            else
              echo "Não encontrou deployment Web App."
            fi
            DEPLOY_FUNC_NAME=$(az deployment group list --resource-group "$RG" --query "[?starts_with(name,'deploy-funcapp-')]|[0].name" -o tsv)
            if [ -n "$DEPLOY_FUNC_NAME" ]; then
              echo "Deployment Function App: $DEPLOY_FUNC_NAME"
              az deployment group show --resource-group "$RG" --name "$DEPLOY_FUNC_NAME" --query properties.outputs
            else
              echo "Não encontrou deployment Function App."
            fi


            