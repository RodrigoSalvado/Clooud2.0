name: Deploy Bicep Individualizado

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'

    steps:
      - uses: actions/checkout@v4

      - name: Login no Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Instalar jq
        run: |
          if ! command -v jq &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Verificar/(Re)criar RG em francecentral
        run: |
          RG="MiniProjetoCloud2.0"
          TARGET_LOCATION="francecentral"
          EXISTE_RG_JSON=$(az group show --name "$RG" -o json 2>/dev/null || echo "")
          if [ -z "$EXISTE_RG_JSON" ]; then
            az group create --name "$RG" --location "$TARGET_LOCATION"
          else
            CURRENT_LOCATION=$(echo "$EXISTE_RG_JSON" | jq -r '.location')
            if [ "$CURRENT_LOCATION" != "$TARGET_LOCATION" ]; then
              az group delete --name "$RG" --yes --no-wait
              echo "A aguardar remoção do RG..."
              for i in {1..60}; do
                if ! az group show --name "$RG" &>/dev/null; then break; fi
                sleep 5
              done
              az group create --name "$RG" --location "$TARGET_LOCATION"
            else
              echo "RG já existe em $TARGET_LOCATION."
            fi
          fi

      - name: Validar Bicep localmente
        run: |
          az bicep install || true
          az bicep build --file templates/resource-group.bicep
          az bicep build --file templates/storage-account.bicep
          az bicep build --file templates/cosmosdb.bicep
          az bicep build --file templates/app-service-plan.bicep
          az bicep build --file templates/web-app.bicep

      - name: Deploy Storage Account + Container
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group create \
              --resource-group MiniProjetoCloud2.0 \
              --template-file templates/storage-account.bicep \
              --parameters \
                storageAccountName='miniprojetostorage20' \
                containerName='reddit-posts' \
                enableBlobVersioning=true \
                blobSoftDeleteDays=7

      - name: Deploy CosmosDB (fallback)
        uses: azure/cli@v1
        with:
          inlineScript: |
            if [ -z "${COSMOS_ACCOUNT_NAME}" ]; then
              echo "Pular Cosmos DB."
              exit 0
            fi
            COSMOS_PRIMARY_LOCATION='francecentral'
            COSMOS_FALLBACK_LOCATIONS='westeurope northeurope eastus uksouth'
            LOCATIONS_TO_TRY=("$COSMOS_PRIMARY_LOCATION")
            for loc in $COSMOS_FALLBACK_LOCATIONS; do LOCATIONS_TO_TRY+=("$loc"); done
            RG="MiniProjetoCloud2.0"
            ACCOUNT_NAME="${COSMOS_ACCOUNT_NAME}"
            SUCCESS=false
            for region in "${LOCATIONS_TO_TRY[@]}"; do
              echo "Tentando Cosmos DB em $region..."
              EXISTE=$(az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" -o json 2>/dev/null || echo "")
              if [ -n "$EXISTE" ]; then
                STATE=$(echo "$EXISTE" | jq -r '.properties.provisioningState // ""')
                if [ "$STATE" != "Succeeded" ]; then
                  az cosmosdb delete --name "$ACCOUNT_NAME" --resource-group "$RG" --yes
                  for i in {1..30}; do
                    sleep 5
                    if ! az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then break; fi
                  done
                else
                  echo "Atualizar existente bem-sucedido em $region"
                fi
              fi
              if az deployment group create \
                  --resource-group "$RG" \
                  --template-file templates/cosmosdb.bicep \
                  --parameters \
                    cosmosAccountName="$ACCOUNT_NAME" \
                    cosmosLocation="$region" \
                    cosmosDatabaseName='RedditApp' \
                    cosmosContainerName='posts' \
                    cosmosPartitionKeyPath='/id' \
                    cosmosThroughput=${COSMOS_THROUGHPUT} \
                  --only-show-errors; then
                echo "Cosmos OK em $region"
                SUCCESS=true
                break
              else
                echo "Falhou em $region. A tentar próxima..."
              fi
            done
            if [ "$SUCCESS" != "true" ]; then
              echo "Falha em todas regiões: ${LOCATIONS_TO_TRY[*]}"
              exit 1
            fi

      - name: Deploy App Service Plan
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group create \
              --resource-group MiniProjetoCloud2.0 \
              --template-file templates/app-service-plan.bicep \
              --parameters \
                planName='ASP-MiniProjetoCloud2.0' \
                skuTier='Basic' \
                skuName='B2' \
                capacity=1 \
                isLinux=true

      - name: Gerar SAS token Storage (opcional)
        id: gen_sas
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="miniprojetostorage20"
            CONTAINER_NAME="reddit-posts"
            EXPIRY=$(date -u -d "1 day" '+%Y-%m-%dT%H:%MZ')
            sasToken=$(az storage container generate-sas \
              --account-name $ACCOUNT_NAME \
              --name $CONTAINER_NAME \
              --permissions racld \
              --expiry $EXPIRY \
              --https-only \
              --auth-mode login \
              --as-user \
              -o tsv)
            echo "SAS_TOKEN=$sasToken" >> $GITHUB_OUTPUT

      - name: Deploy Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            TOKEN="${{ steps.gen_sas.outputs.SAS_TOKEN }}"
            [ -z "$TOKEN" ] && TOKEN=""
            az deployment group create \
              --resource-group MiniProjetoCloud2.0 \
              --template-file templates/web-app.bicep \
              --parameters \
                webAppName='minhaapp-rodrig0salv' \
                planName='ASP-MiniProjetoCloud2.0' \
                imageName='rodrig0salv/minha-app:latest' \
                containerSasToken="$TOKEN" \
                storageAccountName='miniprojetostorage20' \
                containerName='reddit-posts' \
                containerRegistryUrl='' \
                containerRegistryUsername='' \
                containerRegistryPassword=''

      - name: Atribuir role Storage ao Web App (opcional)
        if: ${{ always() }}
        run: |
          RG="MiniProjetoCloud2.0"
          WEBAPP_NAME="minhaapp-rodrig0salv"
          STORAGE_NAME="miniprojetostorage20"
          PRINCIPAL_ID=$(az webapp show --resource-group "$RG" --name "$WEBAPP_NAME" --query identity.principalId -o tsv)
          if [ -n "$PRINCIPAL_ID" ] && [ "$PRINCIPAL_ID" != "null" ]; then
            SCOPE=$(az storage account show --name "$STORAGE_NAME" --resource-group "$RG" --query id -o tsv)
            az role assignment create --assignee-object-id "$PRINCIPAL_ID" --role "Storage Blob Data Contributor" --scope "$SCOPE" || echo "Pode já existir."
          else
            echo "Web App não tem identity configurada ou não existe ainda."
          fi

      - name: Mostrar outputs
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME=$(az deployment group list --resource-group MiniProjetoCloud2.0 --query '[0].name' -o tsv)
            echo "Deployment: $DEPLOY_NAME"
            az deployment group show --resource-group MiniProjetoCloud2.0 --name "$DEPLOY_NAME" --query properties.outputs
