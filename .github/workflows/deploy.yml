name: Deploy Bicep Individualizado

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'
      COSMOS_PRIMARY_LOCATION: 'westeurope'
      COSMOS_FALLBACK_LOCATIONS: 'northeurope eastus'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Login no Azure com Login v2 (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Mostrar contexto Azure
        run: az account show

      # 1. Deploy Resource Group (subscription scope)
      - name: Deploy Resource Group
        run: |
          az bicep install || true
          az bicep build --file templates/resource-group.bicep
          az deployment sub create \
            --location westeurope \
            --template-file templates/resource-group.bicep \
            --parameters rgName='MiniProjetoCloud2.0' location='westeurope'

      # 2. Storage Account + Container
      - name: Deploy Storage Account + Container
        run: |
          az bicep build --file templates/storage-account.bicep
          az deployment group create \
            --resource-group MiniProjetoCloud2.0 \
            --template-file templates/storage-account.bicep \
            --parameters \
              storageAccountName='miniprojetostorage20' \
              containerName='reddit-posts' \
              enableBlobVersioning=true \
              blobSoftDeleteDays=7

      # 3. Cosmos DB NoSQL (SQL API) - Opcional, com fallback de região
      - name: Deploy Cosmos DB NoSQL (SQL API) - Opcional
        run: |
          az bicep build --file templates/cosmosdb.bicep
          if [ -z "${COSMOS_ACCOUNT_NAME}" ]; then
            echo "Pular criação do Cosmos DB pois COSMOS_ACCOUNT_NAME está vazio."
            exit 0
          fi

          # Preparar lista de regiões
          LOCATIONS_TO_TRY=("${COSMOS_PRIMARY_LOCATION}")
          for loc in $COSMOS_FALLBACK_LOCATIONS; do
            LOCATIONS_TO_TRY+=("$loc")
          done

          SUCCESS=false
          for region in "${LOCATIONS_TO_TRY[@]}"; do
            echo "Tentando criar/atualizar Cosmos DB em região: $region"
            if az deployment group create \
                --resource-group MiniProjetoCloud2.0 \
                --template-file templates/cosmosdb.bicep \
                --parameters \
                  cosmosAccountName="${COSMOS_ACCOUNT_NAME}" \
                  cosmosLocation="$region" \
                  cosmosDatabaseName='RedditApp' \
                  cosmosContainerName='posts' \
                  cosmosPartitionKeyPath='/id' \
                  cosmosThroughput=${COSMOS_THROUGHPUT} \
                --only-show-errors; then
              echo "Cosmos DB criado/atualizado com sucesso em $region"
              SUCCESS=true
              break
            else
              echo "Falha na região $region. A tentar próxima, se existir."
            fi
          done

          if [ "$SUCCESS" != "true" ]; then
            echo "Falha em criar Cosmos DB em todas as regiões tentadas: ${LOCATIONS_TO_TRY[*]}"
            echo "Podes: 1) tentar manualmente outra região; 2) solicitar quota/região; 3) continuar sem Cosmos."
            # Se quiseres continuar mesmo sem Cosmos, faz exit 0; se for crítico, exit 1:
            exit 1
          fi

      # 4. App Service Plan
      - name: Deploy App Service Plan
        run: |
          az bicep build --file templates/app-service-plan.bicep
          az deployment group create \
            --resource-group MiniProjetoCloud2.0 \
            --template-file templates/app-service-plan.bicep \
            --parameters \
              planName='ASP-MiniProjetoCloud2.0' \
              skuTier='Basic' \
              skuName='B2' \
              capacity=1 \
              isLinux=true

      # 5. Gerar SAS token para Storage (opcional)
      - name: Gerar SAS token para Storage (opcional)
        id: gen_sas
        run: |
          ACCOUNT_NAME="miniprojetostorage20"
          CONTAINER_NAME="reddit-posts"
          EXPIRY=$(date -u -d "1 day" '+%Y-%m-%dT%H:%MZ')
          sasToken=$(az storage container generate-sas \
            --account-name $ACCOUNT_NAME \
            --name $CONTAINER_NAME \
            --permissions racld \
            --expiry $EXPIRY \
            --https-only \
            --auth-mode login \
            --as-user \
            -o tsv)
          echo "SAS token gerado."
          echo "SAS_TOKEN=$sasToken" >> $GITHUB_OUTPUT

      # 6. Web App
      - name: Deploy Web App
        run: |
          az bicep build --file templates/web-app.bicep
          TOKEN="${{ steps.gen_sas.outputs.SAS_TOKEN }}"
          if [ -z "$TOKEN" ]; then
            TOKEN=""
          fi
          az deployment group create \
            --resource-group MiniProjetoCloud2.0 \
            --template-file templates/web-app.bicep \
            --parameters \
              webAppName='minhaapp-rodrig0salv' \
              planName='ASP-MiniProjetoCloud2.0' \
              imageName='rodrig0salv/minha-app:latest' \
              containerSasToken="$TOKEN" \
              storageAccountName='miniprojetostorage20' \
              containerName='reddit-posts' \
              containerRegistryUrl='' \
              containerRegistryUsername='' \
              containerRegistryPassword='' \
              createRoleAssignment=false

      # 7. Mostrar outputs finais
      - name: Mostrar outputs do deploy
        run: |
          DEPLOY_NAME=$(az deployment group list --resource-group MiniProjetoCloud2.0 --query '[0].name' -o tsv)
          echo "Deployment name: $DEPLOY_NAME"
          az deployment group show \
            --resource-group MiniProjetoCloud2.0 \
            --name "$DEPLOY_NAME" \
            --query properties.outputs
