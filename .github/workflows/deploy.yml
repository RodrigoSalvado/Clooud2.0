name: Deploy Bicep + Web App e Function App

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'
      FUNCTIONAPP_NAME: 'func-rodrig0salv'
      RG: 'MiniProjetoCloud2.0'
      TARGET_LOCATION: 'francecentral'
      WEBAPP_NAME: 'minhaapp-rodrig0salv'
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './redditIngestFunc'
      STORAGE_ACCOUNT_NAME: 'miniprojetostorage20'
      CONTAINER_NAME: 'reddit-posts'
      REDDIT_USER: 'Major-Noise-6411'
      REDDIT_PASSWORD: 'miniprojetocloud'
      CLIENT_ID: 'bzG6zHjC23GSenSIXe0M-Q'
      CLIENT_SECRET: 'DoywW0Lcc26rvDforDKkLOSQsUUwYA'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Login no Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Instalar jq
        run: |
          if ! command -v jq &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Install Azure Functions Core Tools
        run: npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: (Re)Criar Resource Group se não existir
        run: |
          EXISTE_RG_JSON=$(az group show --name "$RG" -o json 2>/dev/null || echo "")
          if [ -z "$EXISTE_RG_JSON" ]; then
            az group create --name "$RG" --location "$TARGET_LOCATION"
          fi

      - name: Validar templates Bicep localmente
        run: |
          az bicep install || true
          az bicep build --file templates/resource-group.bicep
          az bicep build --file templates/storage-account.bicep
          az bicep build --file templates/cosmosdb.bicep
          az bicep build --file templates/app-service-plan.bicep
          az bicep build --file templates/function-app.bicep
          az bicep build --file templates/web-app.bicep

      - name: Deploy Storage Account + Container via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}"
            if ! az storage account show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then
              DEPLOY_NAME="deploy-storage-$(date +%s)"
              az deployment group create \
                --name "$DEPLOY_NAME" \
                --resource-group "$RG" \
                --template-file templates/storage-account.bicep \
                --parameters \
                  storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                  containerName="${CONTAINER_NAME}" \
                  enableBlobVersioning=true \
                  blobSoftDeleteDays=7 \
                --only-show-errors
            fi

      - name: Deploy CosmosDB via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${COSMOS_ACCOUNT_NAME}"
            if [ -n "$ACCOUNT_NAME" ]; then
              if ! az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then
                DEPLOY_NAME="deploy-cosmos-$(date +%s)"
                az deployment group create \
                  --name "$DEPLOY_NAME" \
                  --resource-group "$RG" \
                  --template-file templates/cosmosdb.bicep \
                  --parameters \
                    cosmosAccountName="$ACCOUNT_NAME" \
                    cosmosLocation="$TARGET_LOCATION" \
                    cosmosDatabaseName='RedditApp' \
                    cosmosContainerName='posts' \
                    cosmosPartitionKeyPath='/subreddit' \
                    cosmosThroughput=${COSMOS_THROUGHPUT} \
                  --only-show-errors
              fi
            fi

      - name: Deploy App Service Plan para Web App via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            PLAN_NAME='ASP-MiniProjetoCloud2.0'
            if ! az appservice plan show --name "$PLAN_NAME" --resource-group "$RG" &>/dev/null; then
              DEPLOY_NAME="deploy-asp-web-$(date +%s)"
              az deployment group create \
                --name "$DEPLOY_NAME" \
                --resource-group "$RG" \
                --template-file templates/app-service-plan.bicep \
                --parameters \
                  planName="$PLAN_NAME" \
                  skuTier='Basic' \
                  skuName='B2' \
                  capacity=1 \
                  isLinux=true \
                  location="$TARGET_LOCATION" \
                --only-show-errors
            fi

      - name: Gerar SAS token e CONTAINER_ENDPOINT_SAS completo
        id: gen_sas
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}"
            CONTAINER_NAME="${CONTAINER_NAME}"
            EXPIRY=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
            ACCOUNT_KEY=$(az storage account keys list \
              --account-name "$ACCOUNT_NAME" \
              --resource-group "$RG" \
              --query "[0].value" -o tsv)
            sasToken=$(az storage container generate-sas \
              --account-name "$ACCOUNT_NAME" \
              --account-key "$ACCOUNT_KEY" \
              --name "$CONTAINER_NAME" \
              --permissions raclwd \
              --expiry "$EXPIRY" \
              --https-only \
              -o tsv)
            blobEndpoint=$(az storage account show \
              --name "$ACCOUNT_NAME" \
              --query "primaryEndpoints.blob" -o tsv)
            blobEndpoint=${blobEndpoint%/}
            fullSasUrl="${blobEndpoint}/${CONTAINER_NAME}?${sasToken}"
            echo "SAS_TOKEN=$sasToken" >> $GITHUB_OUTPUT
            echo "CONTAINER_ENDPOINT_SAS=$fullSasUrl" >> $GITHUB_OUTPUT

      - name: Obter connection string da Storage Account
        id: get_storage_conn
        run: |
          CONN=$(az storage account show-connection-string \
            --name "$STORAGE_ACCOUNT_NAME" \
            --resource-group "$RG" \
            --query connectionString -o tsv)
          echo "STORAGE_CONNECTION_STRING=$CONN" >> $GITHUB_OUTPUT

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem Docker da Web App
        run: |
          docker build -t rodrig0salv/minha-app:latest ./web-app

      - name: Push da imagem Docker para Docker Hub
        run: |
          docker push rodrig0salv/minha-app:latest

      - name: Deploy Function App via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            az deployment group create \
              --name "deploy-funcapp-$(date +%s)" \
              --resource-group "$RG" \
              --template-file templates/function-app.bicep \
              --parameters \
                functionAppName="$FUNCTIONAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                cosmosAccountName="${COSMOS_ACCOUNT_NAME}" \
                cosmosDatabaseName="RedditApp" \
                cosmosContainerName="posts" \
                redditUser="${REDDIT_USER}" \
                redditPassword="${REDDIT_PASSWORD}" \
                clientIdValue="${CLIENT_ID}" \
                secretValue="${CLIENT_SECRET}" \
                containerEndpointSas="${{ steps.gen_sas.outputs.CONTAINER_ENDPOINT_SAS }}" \
                translatorEndpoint="" \
                translatorKey="" \
              --only-show-errors

      - name: Debug - listar conteúdo redditIngestFunc antes do zip
        run: |
          echo "$(pwd)"
          ls -R .

      - name: Empacotar código da Function App para Zip Deploy
        run: |
          cd "${AZURE_FUNCTIONAPP_PACKAGE_PATH}"
          zip -r ../funcapp.zip .

      - name: Validar requirements.txt localmente
        run: |
          cd "${AZURE_FUNCTIONAPP_PACKAGE_PATH}"
          if [ -f requirements.txt ]; then
            pip install --upgrade pip
            pip install -r requirements.txt
          fi

      - name: Deploy Function App via Zip Deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --settings \
                FUNCTIONS_WORKER_RUNTIME=python \
                FUNCTIONS_EXTENSION_VERSION="~4" \
                AzureWebJobsStorage="${{ steps.get_storage_conn.outputs.STORAGE_CONNECTION_STRING }}" \
                COSMOS_ENDPOINT="$(az cosmosdb show --name $COSMOS_ACCOUNT_NAME --resource-group $RG --query documentEndpoint -o tsv)" \
                COSMOS_KEY="$(az cosmosdb keys list --name $COSMOS_ACCOUNT_NAME --resource-group $RG --query primaryMasterKey -o tsv)" \
                COSMOS_DATABASE="RedditApp" \
                COSMOS_CONTAINER="posts" \
                REDDIT_USER="${REDDIT_USER}" \
                REDDIT_PASSWORD="${REDDIT_PASSWORD}" \
                CLIENT_ID="${CLIENT_ID}" \
                SECRET="${CLIENT_SECRET}" \
                WEBSITE_RUN_FROM_PACKAGE=1 \
                CONTAINER_ENDPOINT_SAS="${{ steps.gen_sas.outputs.CONTAINER_ENDPOINT_SAS }}" \
                SCM_DO_BUILD_DURING_DEPLOYMENT=true
            az functionapp deployment source config-zip \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --src "$GITHUB_WORKSPACE/funcapp.zip" \
              --only-show-errors
            az functionapp restart --resource-group "$RG" --name "$FUNCTIONAPP_NAME" --only-show-errors

      - name: Aguardar indexação e obter master key da Function App
        id: get_function_key
        uses: azure/cli@v1
        with:
          inlineScript: |
            sleep 30
            MAX_RETRIES=5
            SLEEP_SECONDS=20
            attempt=1
            MASTER_KEY=""
            while [ $attempt -le $MAX_RETRIES ]; do
              state=$(az functionapp show --resource-group "$RG" --name "$FUNCTIONAPP_NAME" --query "state" -o tsv 2>/dev/null)
              if [ "$state" = "Running" ]; then
                MASTER_KEY=$(az functionapp keys list --resource-group "$RG" --name "$FUNCTIONAPP_NAME" --query "masterKey" -o tsv 2>/dev/null || echo "")
                if [ -n "$MASTER_KEY" ]; then
                  break
                fi
              fi
              attempt=$((attempt+1))
              sleep $SLEEP_SECONDS
            done
            if [ -z "$MASTER_KEY" ]; then
              exit 1
            fi
            echo "FUNCTION_KEY=$MASTER_KEY" >> $GITHUB_OUTPUT

      - name: Construir FUNCTION URLs
        id: set_function_url
        run: |
          FUNCTION_KEY="${{ steps.get_function_key.outputs.FUNCTION_KEY }}"
          FUNCTION_URL_FULL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/search?code=${FUNCTION_KEY}"
          GET_POSTS_FUNCTION_URL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/getposts?code=${FUNCTION_KEY}"
          REPORT_FUNCTION_URL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/GenerateReport?code=${FUNCTION_KEY}"
          echo "FUNCTION_URL_FULL=$FUNCTION_URL_FULL" >> $GITHUB_OUTPUT
          echo "GET_POSTS_FUNCTION_URL=$GET_POSTS_FUNCTION_URL" >> $GITHUB_OUTPUT
          echo "REPORT_FUNCTION_URL=$REPORT_FUNCTION_URL" >> $GITHUB_OUTPUT

      - name: Deploy Web App com Function URL e CONTAINER_ENDPOINT_SAS via CLI + Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            SAS_FULL="${{ steps.gen_sas.outputs.CONTAINER_ENDPOINT_SAS }}"
            FUNCTION_URL_FULL="${{ steps.set_function_url.outputs.FUNCTION_URL_FULL }}"
            GET_POSTS_FUNCTION_URL="${{ steps.set_function_url.outputs.GET_POSTS_FUNCTION_URL }}"
            REPORT_FUNCTION_URL="${{ steps.set_function_url.outputs.REPORT_FUNCTION_URL }}"
            az webapp config appsettings set \
              --resource-group "$RG" \
              --name "$WEBAPP_NAME" \
              --settings \
                CONTAINER_ENDPOINT_SAS="$SAS_FULL" \
                FUNCTION_URL="$FUNCTION_URL_FULL" \
                GET_POSTS_FUNCTION_URL="$GET_POSTS_FUNCTION_URL" \
                functionGenerateReport="$REPORT_FUNCTION_URL"
            az deployment group create \
              --name "deploy-webapp-$(date +%s)" \
              --resource-group "$RG" \
              --template-file templates/web-app.bicep \
              --parameters \
                webAppName="$WEBAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                imageName="rodrig0salv/minha-app:latest" \
                containerRegistryUrl="" \
                containerRegistryUsername="" \
                containerRegistryPassword="" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                containerName="${CONTAINER_NAME}" \
                containerSasToken="${{ steps.gen_sas.outputs.SAS_TOKEN }}" \
                functionUrl="$FUNCTION_URL_FULL" \
                functionGetPostsUrl="$GET_POSTS_FUNCTION_URL" \
                functionGenerateReport="$REPORT_FUNCTION_URL" \
                containerEndpointSas="$SAS_FULL" \
              --only-show-errors

      - name: Reiniciar Web App e Function App após deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp restart --resource-group "$RG" --name "$WEBAPP_NAME" --only-show-errors
            az functionapp restart --resource-group "$RG" --name "$FUNCTIONAPP_NAME" --only-show-errors

      - name: Mostrar outputs finais Web + Function e App Settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            az webapp config appsettings list --resource-group "$RG" --name "$WEBAPP_NAME" -o table
            az functionapp config appsettings list --resource-group "$RG" --name "$FUNCTIONAPP_NAME" -o table
            az functionapp function list --resource-group "$RG" --name "$FUNCTIONAPP_NAME" -o table
