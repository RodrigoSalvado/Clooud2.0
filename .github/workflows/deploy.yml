name: Deploy Bicep + Web App e Function App (hardcoded credentials)

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      # Ajuste estes valores conforme teu ambiente
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'
      FUNCTIONAPP_NAME: 'func-rodrig0salv'
      RG: 'MiniProjetoCloud2.0'
      TARGET_LOCATION: 'francecentral'
      WEBAPP_NAME: 'minhaapp-rodrig0salv'
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './redditIngestFunc'
      STORAGE_ACCOUNT_NAME: 'miniprojetostorage20'
      CONTAINER_NAME: 'reddit-posts'
      # Credenciais hardcoded (nÃ£o seguro em repositÃ³rio pÃºblico!)
      REDDIT_USER: 'Major-Noise-6411'
      REDDIT_PASSWORD: 'miniprojetocloud'
      CLIENT_ID: 'bzG6zHjC23GSenSIXe0M-Q'
      CLIENT_SECRET: 'DoywW0Lcc26rvDforDKkLOSQsUUwYA'

    steps:
      - name: Checkout do repositÃ³rio
        uses: actions/checkout@v4

      - name: Login no Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node.js & Func Tools
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Instalar Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Instalar jq (no runner) para JSON parsing
        run: |
          if ! command -v jq &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: (Re)Criar Resource Group se nÃ£o existir
        run: |
          echo "Verificando existÃªncia do Resource Group $RG..."
          EXISTE_RG_JSON=$(az group show --name "$RG" -o json 2>/dev/null || echo "")
          if [ -z "$EXISTE_RG_JSON" ]; then
            echo "Criando Resource Group '$RG' em $TARGET_LOCATION..."
            az group create --name "$RG" --location "$TARGET_LOCATION"
          else
            echo "Resource Group '$RG' jÃ¡ existe em $TARGET_LOCATION. Continuando."
          fi

      - name: Validar templates Bicep localmente
        run: |
          az bicep install || true
          echo "Validando e compilando templates Bicep..."
          az bicep build --file templates/resource-group.bicep
          az bicep build --file templates/storage-account.bicep
          az bicep build --file templates/cosmosdb.bicep
          az bicep build --file templates/app-service-plan.bicep
          az bicep build --file templates/function-app.bicep
          az bicep build --file templates/web-app.bicep
          echo "Templates Bicep compilados com sucesso."

      - name: Deploy Storage Account + Container via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-storage-$(date +%s)"
            echo "Deploy Storage Account via Bicep: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/storage-account.bicep \
              --parameters \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                containerName="${CONTAINER_NAME}" \
                enableBlobVersioning=true \
                blobSoftDeleteDays=7 \
              --only-show-errors
            echo "Storage Account deploy concluÃ­do: $DEPLOY_NAME"

      - name: Criar Translator (API TextTranslation)
        id: create_translator
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "ðŸ”¹ A criar o Translator com API TextTranslation (SKU S1)..."

            az cognitiveservices account create \
              --name "translator" \
              --resource-group "$RG" \
              --kind "TextTranslation" \
              --sku S1 \
              --location "westeurope" \
              --yes

            echo "âœ… Translator criado com sucesso."


      - name: Obter endpoint e key
        id: get_translator_info
        uses: azure/cli@v1
        with:
          inlineScript: |
            TRANSLATOR_ENDPOINT=$(az cognitiveservices account show \
              --resource-group "$RG" \
              --name "translator" \
              --query "properties.endpoint" -o tsv)

            TRANSLATOR_KEY=$(az cognitiveservices account keys list \
              --resource-group "$RG" \
              --name "translator" \
              --query "key1" -o tsv)

            echo "TRANSLATOR_ENDPOINT=$TRANSLATOR_ENDPOINT" >> $GITHUB_OUTPUT
            echo "TRANSLATOR_KEY=$TRANSLATOR_KEY" >> $GITHUB_OUTPUT


      - name: Deploy CosmosDB (se nÃ£o existir) via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${COSMOS_ACCOUNT_NAME}"
            if [ -z "$ACCOUNT_NAME" ]; then
              echo "VariÃ¡vel COSMOS_ACCOUNT_NAME vazia: pulando Cosmos DB."
              exit 0
            fi
            if az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then
              echo "Conta Cosmos DB '$ACCOUNT_NAME' jÃ¡ existe em RG '$RG'. Pulando deploy."
            else
              echo "Conta Cosmos DB '$ACCOUNT_NAME' NÃƒO existe. Realizando deploy em $TARGET_LOCATION..."
              DEPLOY_NAME="deploy-cosmos-$(date +%s)"
              az deployment group create \
                --name "$DEPLOY_NAME" \
                --resource-group "$RG" \
                --template-file templates/cosmosdb.bicep \
                --parameters \
                  cosmosAccountName="$ACCOUNT_NAME" \
                  cosmosLocation="$TARGET_LOCATION" \
                  cosmosDatabaseName='RedditApp' \
                  cosmosContainerName='posts' \
                  cosmosPartitionKeyPath='/subreddit' \
                  cosmosThroughput=${COSMOS_THROUGHPUT} \
                --only-show-errors
              echo "Deploy Cosmos concluÃ­do: $DEPLOY_NAME"
            fi

      - name: Deploy App Service Plan para Web App via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-asp-web-$(date +%s)"
            echo "Deploy App Service Plan via Bicep: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/app-service-plan.bicep \
              --parameters \
                planName='ASP-MiniProjetoCloud2.0' \
                skuTier='Basic' \
                skuName='B1' \
                capacity=1 \
                isLinux=true \
                location="$TARGET_LOCATION" \
              --only-show-errors
            echo "App Service Plan deploy concluÃ­do: $DEPLOY_NAME"

      - name: Gerar SAS token e CONTAINER_ENDPOINT_SAS completo
        id: gen_sas
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${STORAGE_ACCOUNT_NAME}"
            CONTAINER_NAME="${CONTAINER_NAME}"
            echo "Gerando SAS token para o container ${CONTAINER_NAME} na Storage Account ${ACCOUNT_NAME}..."
            EXPIRY=$(date -u -d "30 days" '+%Y-%m-%dT%H:%MZ')
            ACCOUNT_KEY=$(az storage account keys list \
              --account-name "$ACCOUNT_NAME" \
              --resource-group "$RG" \
              --query "[0].value" -o tsv)
            sasToken=$(az storage container generate-sas \
              --account-name "$ACCOUNT_NAME" \
              --account-key "$ACCOUNT_KEY" \
              --name "$CONTAINER_NAME" \
              --permissions raclwd \
              --expiry "$EXPIRY" \
              --https-only \
              -o tsv)
            blobEndpoint=$(az storage account show \
              --name "$ACCOUNT_NAME" \
              --query "primaryEndpoints.blob" -o tsv)
            blobEndpoint=${blobEndpoint%/}
            fullSasUrl="${blobEndpoint}/${CONTAINER_NAME}?${sasToken}"
            echo "SAS_TOKEN=$sasToken" >> $GITHUB_OUTPUT
            echo "CONTAINER_ENDPOINT_SAS=$fullSasUrl" >> $GITHUB_OUTPUT
            echo "DEBUG: fullSasUrl = $fullSasUrl"

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build da imagem Docker da Web App
        run: |
          echo "A construir a imagem Docker: rodrig0salv/minha-app:latest"
          docker build -t rodrig0salv/minha-app:latest ./web-app

      - name: Push da imagem Docker para Docker Hub
        run: |
          echo "A enviar a imagem Docker para Docker Hub"
          docker push rodrig0salv/minha-app:latest


      - name: Deploy Function App via Bicep
        uses: azure/cli@v1
        env:
          TRANSLATOR_ENDPOINT: ${{ steps.get_translator_info.outputs.TRANSLATOR_ENDPOINT }}
          TRANSLATOR_KEY: ${{ steps.get_translator_info.outputs.TRANSLATOR_KEY }}
        with:
          inlineScript: |
            echo "Deploy Function App ($FUNCTIONAPP_NAME) via Bicep..."
            az deployment group create \
              --name "deploy-funcapp-$(date +%s)" \
              --resource-group "$RG" \
              --template-file templates/function-app.bicep \
              --parameters \
                functionAppName="$FUNCTIONAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                cosmosAccountName="${COSMOS_ACCOUNT_NAME}" \
                cosmosDatabaseName="RedditApp" \
                cosmosContainerName="posts" \
                redditUser="${REDDIT_USER}" \
                redditPassword="${REDDIT_PASSWORD}" \
                clientIdValue="${CLIENT_ID}" \
                secretValue="${CLIENT_SECRET}" \
                translatorEndpoint="$TRANSLATOR_ENDPOINT" \
                translatorKey="$TRANSLATOR_KEY" \
              --only-show-errors
            echo "Function App deployment via Bicep concluÃ­do."

      - name: Configurar Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'


      - name: Instalar Azure Functions Core Tools
        run: |
          npm install -g azure-functions-core-tools@4 --unsafe-perm true
          func --version

      - name: Publicar Function App
        run: |
          cd "${AZURE_FUNCTIONAPP_PACKAGE_PATH}"
          func azure functionapp publish "$FUNCTIONAPP_NAME" --python --build remote

      - name: Aguardar indexaÃ§Ã£o e obter master key da Function App
        id: get_function_key
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Aguardando indexaÃ§Ã£o final das funÃ§Ãµes..."
            sleep 15
            echo "Obtendo master key da Function App '$FUNCTIONAPP_NAME'..."
            MASTER_KEY=$(az functionapp keys list \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --query "masterKey" -o tsv)
            if [ -z "$MASTER_KEY" ]; then
              echo "Erro: nÃ£o conseguiu obter master key da Function App."
              exit 1
            fi
            echo "FUNCTION_KEY=$MASTER_KEY" >> $GITHUB_OUTPUT

      - name: Construir FUNCTION URLs
        id: set_function_url
        run: |
          echo "Montando URLs das funÃ§Ãµes..."
          FUNCTION_KEY="${{ steps.get_function_key.outputs.FUNCTION_KEY }}"
          if [ -z "$FUNCTION_KEY" ]; then
            echo "WARNING: FUNCTION_KEY estÃ¡ vazio!"
          fi
          FUNCTION_URL_FULL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/search?code=${FUNCTION_KEY}"
          GET_POSTS_FUNCTION_URL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/getposts?code=${FUNCTION_KEY}"
          echo "FUNCTION_URL_FULL=$FUNCTION_URL_FULL" >> $GITHUB_OUTPUT
          echo "GET_POSTS_FUNCTION_URL=$GET_POSTS_FUNCTION_URL" >> $GITHUB_OUTPUT
          echo "DEBUG: FUNCTION_URL_FULL = $FUNCTION_URL_FULL"
          echo "DEBUG: GET_POSTS_FUNCTION_URL = $GET_POSTS_FUNCTION_URL"

      - name: Deploy Web App com Function URL e CONTAINER_ENDPOINT_SAS via CLI + Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            SAS_FULL="${{ steps.gen_sas.outputs.CONTAINER_ENDPOINT_SAS }}"
            FUNCTION_URL_FULL="${{ steps.set_function_url.outputs.FUNCTION_URL_FULL }}"
            GET_POSTS_FUNCTION_URL="${{ steps.set_function_url.outputs.GET_POSTS_FUNCTION_URL }}"
            echo "DEBUG: SAS_FULL para deploy do Web App: $SAS_FULL"
            echo "DEBUG: FUNCTION_URL_FULL: $FUNCTION_URL_FULL"
            echo "DEBUG: GET_POSTS_FUNCTION_URL: $GET_POSTS_FUNCTION_URL"
            if [ -z "$FUNCTION_URL_FULL" ] || [ -z "$GET_POSTS_FUNCTION_URL" ]; then
              echo "ERRO: As URLs das functions estÃ£o vazias. Verifique a etapa anterior."
              exit 1
            fi
            az webapp config appsettings set \
              --resource-group "$RG" \
              --name "$WEBAPP_NAME" \
              --settings \
                CONTAINER_ENDPOINT_SAS="$SAS_FULL" \
                FUNCTION_URL="$FUNCTION_URL_FULL" \
                GET_POSTS_FUNCTION_URL="$GET_POSTS_FUNCTION_URL"

            echo "Iniciando deploy Web App ($WEBAPP_NAME) via Bicep..."
            az deployment group create \
              --name "deploy-webapp-$(date +%s)" \
              --resource-group "$RG" \
              --template-file templates/web-app.bicep \
              --parameters \
                webAppName="$WEBAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                imageName="rodrig0salv/minha-app:latest" \
                containerRegistryUrl="" \
                containerRegistryUsername="" \
                containerRegistryPassword="" \
                storageAccountName="${STORAGE_ACCOUNT_NAME}" \
                containerName="${CONTAINER_NAME}" \
                containerSasToken="${{ steps.gen_sas.outputs.SAS_TOKEN }}" \
                functionUrl="$FUNCTION_URL_FULL" \
                functionGetPostsUrl="$GET_POSTS_FUNCTION_URL" \
                containerEndpointSas="$SAS_FULL" \
                cosmosAccountName="${COSMOS_ACCOUNT_NAME}" \
                translatorEndpoint="${{ steps.get_translator_info.outputs.TRANSLATOR_ENDPOINT }}" \
                translatorKey="${{ steps.get_translator_info.outputs.TRANSLATOR_KEY }}" \
              --only-show-errors
            echo "Web App deployment concluÃ­do."

      - name: Reiniciar Web App e Function App apÃ³s deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Reiniciando Web App e Function App..."
            az webapp restart --resource-group "$RG" --name "$WEBAPP_NAME" --only-show-errors
            az functionapp restart --resource-group "$RG" --name "$FUNCTIONAPP_NAME" --only-show-errors

      - name: Mostrar outputs finais Web + Function e App Settings
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "=== App Settings do Web App apÃ³s deploy ==="
            az webapp config appsettings list --resource-group "$RG" --name "$WEBAPP_NAME" -o table
            echo "=== App Settings do Function App apÃ³s deploy ==="
            az functionapp config appsettings list --resource-group "$RG" --name "$FUNCTIONAPP_NAME" -o table
            echo "=== FunÃ§Ãµes disponÃ­veis na Function App ==="
            az functionapp function list \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              -o table