name: Deploy Bicep Individualizado em France Central

on:
  push:
    branches:
      - main
      - master

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      COSMOS_ACCOUNT_NAME: 'cosmosdbminiprojeto'
      COSMOS_THROUGHPUT: '400'
      FUNCTIONAPP_NAME: 'func-rodrig0salv'
      RG: 'MiniProjetoCloud2.0'
      TARGET_LOCATION: 'francecentral'
      WEBAPP_NAME: 'minhaapp-rodrig0salv'
      AZURE_FUNCTIONAPP_PACKAGE_PATH: './redditIngestFunc'
      # Nome fixo para o Translator; embora vá tentar em regiões compatíveis
      TRANSLATOR_NAME: 'translator-func-rodrig0salv'
      # Se usar plano existente, defina em secrets ou variável:
      # FUNCTION_PLAN_RESOURCE_ID: '/subscriptions/.../resourceGroups/.../providers/Microsoft.Web/serverfarms/ASP-...'

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Login no Azure via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Instalar jq (no runner)
        run: |
          if ! command -v jq &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: (Re)Criar Resource Group em francecentral
        run: |
          # Verifica se RG existe; se existir em outra região, recria em TARGET_LOCATION
          EXISTE_RG_JSON=$(az group show --name "$RG" -o json 2>/dev/null || echo "")
          if [ -z "$EXISTE_RG_JSON" ]; then
            echo "Criando RG '$RG' em $TARGET_LOCATION..."
            az group create --name "$RG" --location "$TARGET_LOCATION"
          else
            CURRENT_LOCATION=$(echo "$EXISTE_RG_JSON" | jq -r '.location')
            if [ "$CURRENT_LOCATION" != "$TARGET_LOCATION" ]; then
              echo "RG '$RG' existe em $CURRENT_LOCATION e será recriado em $TARGET_LOCATION..."
              az group delete --name "$RG" --yes --no-wait
              echo "Aguardando remoção do RG..."
              for i in {1..60}; do
                if ! az group show --name "$RG" &>/dev/null; then
                  echo "RG removido."
                  break
                fi
                sleep 5
              done
              echo "Criando RG '$RG' em $TARGET_LOCATION..."
              az group create --name "$RG" --location "$TARGET_LOCATION"
            else
              echo "RG '$RG' já existe em $TARGET_LOCATION. Continuando."
            fi
          fi

      - name: Validar templates Bicep localmente
        run: |
          az bicep install || true
          az bicep build --file templates/resource-group.bicep
          az bicep build --file templates/storage-account.bicep
          az bicep build --file templates/cosmosdb.bicep
          az bicep build --file templates/app-service-plan.bicep
          az bicep build --file templates/web-app.bicep
          az bicep build --file templates/function-app.bicep

      - name: Deploy Storage Account + Container
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-storage-$(date +%s)"
            echo "Deploy Storage Account: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/storage-account.bicep \
              --parameters \
                storageAccountName='miniprojetostorage20' \
                containerName='reddit-posts' \
                enableBlobVersioning=true \
                blobSoftDeleteDays=7 \
              --only-show-errors
            echo "Storage Account deploy concluído: $DEPLOY_NAME"

      - name: Deploy CosmosDB (pular se já existe)
        uses: azure/cli@v1
        with:
          inlineScript: |
            ACCOUNT_NAME="${COSMOS_ACCOUNT_NAME}"
            if [ -z "$ACCOUNT_NAME" ]; then
              echo "Variável COSMOS_ACCOUNT_NAME vazia: pulando Cosmos DB."
              exit 0
            fi

            if az cosmosdb show --name "$ACCOUNT_NAME" --resource-group "$RG" &>/dev/null; then
              echo "Conta Cosmos DB '$ACCOUNT_NAME' já existe em RG '$RG'. Pulando deploy."
            else
              echo "Conta Cosmos DB '$ACCOUNT_NAME' NÃO existe. Realizando deploy em $TARGET_LOCATION..."
              DEPLOY_NAME="deploy-cosmos-$(date +%s)"
              az deployment group create \
                --name "$DEPLOY_NAME" \
                --resource-group "$RG" \
                --template-file templates/cosmosdb.bicep \
                --parameters \
                  cosmosAccountName="$ACCOUNT_NAME" \
                  cosmosLocation="$TARGET_LOCATION" \
                  cosmosDatabaseName='RedditApp' \
                  cosmosContainerName='posts' \
                  cosmosPartitionKeyPath='/id' \
                  cosmosThroughput=${COSMOS_THROUGHPUT} \
                --only-show-errors
              echo "Deploy Cosmos concluído: $DEPLOY_NAME"
            fi

      - name: Deploy App Service Plan para Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-asp-web-$(date +%s)"
            echo "Deploy App Service Plan: $DEPLOY_NAME"
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/app-service-plan.bicep \
              --parameters \
                planName='ASP-MiniProjetoCloud2.0' \
                skuTier='Basic' \
                skuName='B2' \
                capacity=1 \
                isLinux=true \
                location="$TARGET_LOCATION" \
              --only-show-errors
            echo "App Service Plan deploy concluído: $DEPLOY_NAME"

      - name: Deploy Function App em Python via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-funcapp-$(date +%s)"
            echo "Deploy Function App ($FUNCTIONAPP_NAME) via Bicep..."
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/function-app.bicep \
              --parameters \
                functionAppName="$FUNCTIONAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                storageAccountName="miniprojetostorage20" \
                cosmosAccountName="cosmosdbminiprojeto" \
                cosmosDatabaseName="RedditApp" \
                cosmosContainerName="posts" \
                redditUser="Major-Noise-6411" \
                redditPassword="miniprojetocloud" \
                secretValue="DoywW0Lcc26rvDforDKkLOSQsUUwYA" \
                clientIdValue="bzG6zHjC23GSenSIXe0M-Q" \
                translatorEndpoint="" \
                translatorKey="" \
              --only-show-errors
            echo "Function App deployment concluído: $DEPLOY_NAME"


      - name: Criar Translator Free em região suportada e configurar App Settings na Function App
        uses: azure/cli@v1
        with:
          inlineScript: |
            RG="${{ env.RG }}"
            # Lista de regiões candidatas que suportam Translator Free (ajuste conforme disponível)
            REGIONS_CANDIDATAS=("westeurope" "westus2" "eastus" "northeurope")
            TRANSLATOR_NAME="${{ env.TRANSLATOR_NAME }}"
            SUCESSO=0

            # Garante RG existe
            if ! az group show --name "$RG" &>/dev/null; then
              echo "Resource Group $RG não existe, criando em ${REGIONS_CANDIDATAS[0]}..."
              az group create --name "$RG" --location "${REGIONS_CANDIDATAS[0]}"
            fi

            echo "Tentando criar Translator Free (F0) em regiões candidatas..."
            for REGION in "${REGIONS_CANDIDATAS[@]}"; do
              echo "- Tentando região $REGION..."
              # Verifica se já existe com esse nome
              if az cognitiveservices account show --name "$TRANSLATOR_NAME" --resource-group "$RG" &>/dev/null; then
                echo "Translator '$TRANSLATOR_NAME' já existe em RG '$RG'. Pulando criação."
                SUCESSO=1
                break
              fi

              # Tenta criar
              set +e
              az cognitiveservices account create \
                --name "$TRANSLATOR_NAME" \
                --resource-group "$RG" \
                --kind Translator \
                --sku F0 \
                --location "$REGION" \
                --yes &> /tmp/translator_create.log
              STATUS=$?
              set -e
              if [ $STATUS -eq 0 ]; then
                echo "Criado Translator '$TRANSLATOR_NAME' em $REGION."
                SUCESSO=1
                break
              else
                echo "Falha ao criar Translator em $REGION. Log inicial:"
                sed -n '1,5p' /tmp/translator_create.log
                echo "Tentando próxima região..."
              fi
            done

            if [ $SUCESSO -ne 1 ]; then
              echo "Erro: não conseguiu criar Translator Free em nenhuma região candidata."
              exit 1
            fi

            # Obter endpoint e chave
            echo "Obtendo endpoint e chave do Translator '$TRANSLATOR_NAME'..."
            ENDPOINT=$(az cognitiveservices account show \
              --name "$TRANSLATOR_NAME" \
              --resource-group "$RG" \
              --query "properties.endpoint" -o tsv)
            KEY=$(az cognitiveservices account keys list \
              --name "$TRANSLATOR_NAME" \
              --resource-group "$RG" \
              --query "key1" -o tsv)
            if [ -z "$ENDPOINT" ] || [ -z "$KEY" ]; then
              echo "Erro: não foi possível obter endpoint ou chave do Translator."
              exit 1
            fi
            echo "Endpoint do Translator: $ENDPOINT"

            # Atualiza App Settings da Function App
            echo "Configurando App Settings TRANSLATOR_ENDPOINT e TRANSLATOR_KEY na Function App '$FUNCTIONAPP_NAME'..."
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --settings TRANSLATOR_ENDPOINT="$ENDPOINT" TRANSLATOR_KEY="$KEY"
            echo "App Settings do Translator atualizados na Function App."

      - name: Instalar Azure Functions Core Tools
        run: |
          # Executado no runner Ubuntu
          if ! command -v npm &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y nodejs npm
          fi
          npm install -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Validar existência do diretório de Functions
        run: |
          if [ ! -d "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" ]; then
            echo "Diretório ${AZURE_FUNCTIONAPP_PACKAGE_PATH} não existe. Abortando publicação de Functions."
            exit 1
          fi

      - name: Instalar dependências Python da Function App localmente
        run: |
          python3 -m venv .venv_func
          source .venv_func/bin/activate
          pip install --upgrade pip
          pip install -r "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt"

      - name: Publicar Azure Function App com Remote Build
        env:
          RG: ${{ env.RG }}
          FUNCTIONAPP_NAME: ${{ env.FUNCTIONAPP_NAME }}
          AZURE_FUNCTIONAPP_PACKAGE_PATH: "./redditIngestFunc"
        run: |
          cd "$AZURE_FUNCTIONAPP_PACKAGE_PATH"
          echo "Publicando Function App '$FUNCTIONAPP_NAME' em RG '$RG'..."
          func azure functionapp publish "$FUNCTIONAPP_NAME" --python

      - name: Deploy Web App via Bicep
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_NAME="deploy-webapp-$(date +%s)"
            echo "Deploy/WebApp via Bicep ($WEBAPP_NAME)..."
            az deployment group create \
              --name "$DEPLOY_NAME" \
              --resource-group "$RG" \
              --template-file templates/web-app.bicep \
              --parameters \
                webAppName="$WEBAPP_NAME" \
                planName="ASP-MiniProjetoCloud2.0" \
                imageName="rodrig0salv/minha-app:latest" \
                containerRegistryUrl='' \
                containerRegistryUsername='' \
                containerRegistryPassword='' \
                storageAccountName="miniprojetostorage20" \
                containerName="reddit-posts" \
                containerSasToken="${{ steps.gen_sas.outputs.SAS_TOKEN }}" \
              --only-show-errors
            echo "Web App deployment concluído: $DEPLOY_NAME"

      - name: Obter master key da Function App e atualizar App Setting FUNCTION_URL na Web App
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Obtendo master key da Function App '$FUNCTIONAPP_NAME'..."
            MASTER_KEY=$(az functionapp keys list \
              --resource-group "$RG" \
              --name "$FUNCTIONAPP_NAME" \
              --query "masterKey" -o tsv)
            if [ -z "$MASTER_KEY" ]; then
              echo "Erro: não conseguiu obter master key da Function App. Abortando atualização de FUNCTION_URL."
              exit 1
            fi
            FUNCTION_URL_FULL="https://${FUNCTIONAPP_NAME}.azurewebsites.net/api/SearchFunction?code=${MASTER_KEY}"
            echo "FUNCTION_URL completa (com master key): $FUNCTION_URL_FULL"
            echo "Atualizando App Setting FUNCTION_URL na Web App '$WEBAPP_NAME'..."
            az webapp config appsettings set \
              --resource-group "$RG" \
              --name "$WEBAPP_NAME" \
              --settings FUNCTION_URL="$FUNCTION_URL_FULL"
            echo "App Setting FUNCTION_URL atualizado na Web App."

      - name: Reiniciar Web App e Function App após deploy
        uses: azure/cli@v1
        with:
          inlineScript: |
            echo "Reiniciando Web App '$WEBAPP_NAME'..."
            az webapp restart --resource-group "$RG" --name "$WEBAPP_NAME"
            echo "Reiniciando Function App '$FUNCTIONAPP_NAME'..."
            az functionapp restart --resource-group "$RG" --name "$FUNCTIONAPP_NAME"
            echo "Ambos reiniciados."

      - name: Mostrar outputs finais Web + Function
        uses: azure/cli@v1
        with:
          inlineScript: |
            DEPLOY_WEB_NAME=$(az deployment group list --resource-group "$RG" --query "[?starts_with(name,'deploy-webapp-')]|[0].name" -o tsv)
            if [ -n "$DEPLOY_WEB_NAME" ]; then
              echo "Deployment Web App: $DEPLOY_WEB_NAME"
              az deployment group show --resource-group "$RG" --name "$DEPLOY_WEB_NAME" --query properties.outputs
            else
              echo "Não encontrou deployment Web App."
            fi
            DEPLOY_FUNC_NAME=$(az deployment group list --resource-group "$RG" --query "[?starts_with(name,'deploy-funcapp-')]|[0].name" -o tsv)
            if [ -n "$DEPLOY_FUNC_NAME" ]; then
              echo "Deployment Function App: $DEPLOY_FUNC_NAME"
              az deployment group show --resource-group "$RG" --name "$DEPLOY_FUNC_NAME" --query properties.outputs
            else
              echo "Não encontrou deployment Function App."
            fi
